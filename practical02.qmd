---
title: "Getting started with R"
author: "Kliment Berbatov"
date: today
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
# Your answer in code
c('A','B','C')

```
> [1] "A" "B" "C"


* Assign the vector to a variable `my_letters`
```{r}
# Your answer in code
my_letters <- c('A','B','C')

```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
# Your answer in code
letters

```

>  There is an in-built object in the R environment that contains all the lower case letters in the english alphabet.


* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
# Your answer in code
c(my_letters,my_letters)

```

> We get a new vector with the elements of both vectors, in sequence.


* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
typeof(c(letters, 1))
```

> The type of the vector stays the same, but the number 1 gets cast to a character with value "1".


### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
# Your answer in code
my_vec <- 1:8
my_vec <- my_vec + 2
my_vec <-  my_vec + 1:4

```



### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
A <- matrix(c(4,9,10,1,5,7),ncol = 2,nrow = 3)
dim(A)
el <- A[2,2]
A <- cbind(A,c(0,0,0))
A[A==4] <- 0
t(A)

```


8. Are any values in `A` larger than 10? 
```{r}
# Your answer in code
A[A>10]

```

9. Are all values in `A` smaller than 10?
```{r}
# Your answer in code
all(A<10)

```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
# Your answer in code
foo <- function(x,y) {
  as.numeric(x) + as.numeric(y)
}

```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code
mmsd <- function(x) {
  c(mean(x,na.rm = TRUE),median(x,na.rm = TRUE),sd(x,na.rm = TRUE))
}


```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
# Your answer in code
vec <- c('1' , "a", NA, "2", NA)
vec|>
  is.na()|>
  sum()


```


